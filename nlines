#!/usr/bin/env bash

##
##  nlines:
##     - Estimates total number of lines in files
##     - See nlines-completion.bash located in .bash_completion.d
##

CONFIG_DIR="$HOME/.config/bash"
pkg=$(basename $0)                                  # pkg (script) full name
pkg_root=$(echo $pkg | awk -F '.' '{print $1}')     # pkg without file extention
pkg_path=$(cd $(dirname $0); pwd -P)                # location of pkg
pkg_lib="$pkg_path/core"                            # location of source libraries
config_dir="$HOME/.config/$pkg"                     # location of ancillary configuration files
column_width='60'                                   # width of columnar screen output

# source colors, exitcodes, version file, and  std_function defs | NOTE: source order dependent
source $pkg_lib/colors.sh
source $pkg_lib/exitcodes.sh
source $pkg_lib/version.py
source $pkg_lib/std_functions.sh

# formatting
bd=$(echo -e ${bold})
bdwt=$(echo -e ${bold}${a_brightwhite})
bgf=$(echo -e ${greenbold_frame})
bg=$(echo -e ${a_brightgreen})
bb=$(echo -e ${a_brightblue})
gbl=$(echo -e ${ITALIC}${a_bluegray})
obf=$(echo -e ${bold}${a_orange})
bbf=$(echo -e ${pv_bluebold})
bcy=$(echo -e ${cyan})
wbf=$(echo -e ${whitebold_frame})
wgc=$(echo -e ${a_gray})                              # white gray
datec=$(echo -e ${blue})
bbc=$(echo -e ${bold}${a_brightcyan})
title=$(echo -e ${bold}${a_brightwhite})              # title color, white + bold
hic=$(echo -e ${bold}${a_brightyellowgreen})          # help menu accent 1
bin=$(echo -e ${bold}${a_orange})                     # help menu binary accent
ul=$(echo -e ${underline})                            # std underline
bd=$(echo -e ${bold})                                 # std bold
wt=$(echo -e ${a_brightwhite})                        # help menu accent 2
fs=$(echo -e ${yellow})                               # file path color
btext=${reset}                                        # clear accents; rtn to native term colors
frame=${btext}
rst=${reset}

border=$(echo -e ${bbf})

# --- declarations ---------------------------------------------------------------------------------


function help_menu(){
    cat <<EOM

                       ${title}nlines${btext} command help

  ${title}DESCRIPTION${btext}

        Count the total number of lines of text in code projects

  ${title}SYNOPSIS${btext}

        $ ${bin}$pkg${reset}  ${bbc}[${btext} --sum <value> ${bbc}|${btext} --help ${bbc}|${btext} --configuration ${bbc}]${btext}

                        -s | --sum  <N values>
                       [-c | --configuration ]
                       [-e | --exclusions ]
                       [-h | --help  ]
                       [-V | --version ]
  ${title}OPTIONS${btext}

        ${title}-s${btext}, ${title}--sum${btext} <value>:  Sum the total number of lines of text.

        ${title}-c${btext}, ${title}--configuration${btext}:  Update runtime options via cli menu.
            Change  display format, output color, toggle off human
            formatted  numbers for programmatic output consumption
            of tables.  Add file extensions to the exclusion list.

        ${title}-e${btext}, ${title}--exclusions${btext}:  Display contents of the exlusions list.

        ${title}-h${btext}, ${title}--help${btext}:  Display this help menu.

        ${title}-V${btext}, ${title}--version${btext}:  Show ${pkg} version & license information.

  ${title}EXAMPLES${btext}

            ${gbl}Full path access to file object targets${btext}
                    $  $pkg  --sum  /usr/bin/ <tab><tab>

            ${gbl}Relative Path access to text file objects${btext}
                    $  cd  <target directory>
                    $  $pkg  --sum  <tab><tab>

            ${gbl}Add file extension to the exclusion list${btext}
                    $  $pkg  --configuration  exclusions
   __________________________________________________________________

            ${btext}README:  ${url}https://github.com/fstab50/${pkg}${btext}
   __________________________________________________________________
${reset}
EOM
    #
    # <-- end function help_menu -->
}


function build_exclusions_list(){
    ##
    ## Builds list of excluded file patterns
    ##
    local listfile='exclusions.list'
    declare -a temparray
    for i in $(cat $config_dir/$listfile); do
        temparray=( "${temparray[@]}" "$i" )
    done
    echo "${temparray[@]}"
}


function included(){
    ##
    ##  skips object types on exclusion list
    ##
    local object="$1"

    for pattern in $(build_exclusions_list); do
        if [[ $(echo $object | grep "$pattern" 2>/dev/null) ]]; then
            return 1
        fi
    done
    return 0
}


function human_readable(){
    ##
    ##  Adds commas
    ##
    local number="$1"
    printf -- "%'d\n" $number
}


function print_bar(){
    local width="$1"
    printf -- '%s' "${bbc}"
    printf '\t%*s\n' "$(($width + 1))" '' | tr ' ' "-"
    printf -- '%s' "$rst"
}


function print_header(){
    local sp=$column_width
    print_bar "$sp"
    printf -- "\t%s %${sp}s\n" "object${rst}" "lines${rst}"
    print_bar "$sp"
}


function print_exclusions(){
    ##
    ##  Display contents of exclusions list
    ##
    local count='1'

    printf -- '\n\t%s\n\n' "${gbl}List of File patterns excluded from line count${rst}:"

    for i in $(build_exclusions_list); do
        div="${gbl})${rst}"
        printf -- '\t\t%6s%2s%2s%-6s\n' "$count" "${div}" " " "$i"
        (( count++ ))
    done
    printf -- '\n'
    return 0
}


function print_object(){
    local object="$1"
    local twidth=$column_width
    local owidth=${#object}
    local cutoff=$(( $column_width - 8 ))
    local sp

    if [ $owidth -ge $cutoff ]; then
        printname=${object::$cutoff}
    else
        printname=$object
    fi

    sp=$(( $twidth - ${#printname} ))
    hsum=$(human_readable "$(cat $object | wc -l)")    # format large numbers
    printf -- "\t%s %${sp}s\n" "$printname" "$hsum"
    return 0
}


function process_objects(){
    ##
    ## iterate thru $@, counting lines
    ##
    #declare -a options=("${!1}")

    print_header

    while [ $# -gt 0 ]; do
        case "$1" in

            '--sum')
                shift 1
                ;;

            *)
                if [ -f "$1" ] &&  included "$1"; then
                    # is file object
                    sum=$(( $sum + $(cat $1 | wc -l) ))
                    print_object "$1"

                elif [ -d "$1" ]; then
                    # is directory
                    for i in $(find "$1" ! -iwholename '*.git*' -type f); do
                        if [ -f $i ] &&  included "$i"; then
                            sum=$(( $sum + $(cat $i | wc -l) ))
                            print_object "$i"
                        fi
                    done
                fi
                shift 1
                ;;
        esac
    done
    # format large numbers
    hsum=$(human_readable "$sum")
    print_bar "$column_width"
    sp=$(( $column_width + 8))
    printf -- "\t%s %${sp}s\n" "${bd}Total Lines${rst}:" "${bbf}$hsum${rst}"
}


function sum_directory(){
    local dir="$1"
    local pwd=$PWD

    cd $dir || exit 1
    for i in *; do
        if [ -f $i ] &&  included "$i"; then
            sum=$(( $sum + $(cat $i | wc -l) ))
            print_object "$i"
        fi
    done
    cd $pwd || exit 1
}


function nlines(){
    ##
    ## length in lines of file provided as parameter
    ##
    local sum='0'
    local pwd=$PWD

    if [[ ! "$@" ]]; then
        help_menu | indent04

    elif [[ $(echo "$@" | grep "\-\-help") ]] || [[ $(echo "$@" | grep "\-h") ]]; then
        help_menu | indent04

    elif [[ $(echo "$@" | grep "\-\-sum") ]]; then
        process_objects "$@"

    elif [[ $(echo "$@" | grep "\-\-configuration") ]]; then
        echo "configuration menu display here"

    elif [[ $(echo "$@" | grep "\-\-exclusions") ]]; then
        print_exclusions

    else
        process_objects "$@"
    fi
}

nlines "$@"

exit 0
